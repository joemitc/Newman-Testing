{
	"info": {
		"_postman_id": "887bb122-7bcf-437e-8289-0f7a986c6d02",
		"name": "Full Collection Week 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37414474"
	},
	"item": [
		{
			"name": "Exercise 1 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is within 2000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains coord\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"coord\");\r",
							"});\r",
							"\r",
							"// pm.test(\"Weather contains 'broken clouds'\", function () {\r",
							"//     pm.expect(pm.response.json().weather[0].description).to.equal(\"broken clouds\");\r",
							"//     //pm.expect(pm.response.json.weather[2].description).to.include(\"broken clouds\");\r",
							"//     //pm.expect(jsonData.weather[2].description).to.include(\"broken clouds\");\r",
							"//     //let description = pm.response.json().weather.description;\r",
							"//     //pm.expect(description).to.include(\"broken clouds\");\r",
							"// });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}?lat={{lat}}&lon={{lon}}&units={{units}}&appid={{api_key}}",
					"host": [
						"{{base_url}}"
					],
					"query": [
						{
							"key": "lat",
							"value": "{{lat}}"
						},
						{
							"key": "lon",
							"value": "{{lon}}"
						},
						{
							"key": "units",
							"value": "{{units}}"
						},
						{
							"key": "appid",
							"value": "{{api_key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Exercise 2 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Weather is an array\", function () {\r",
							"    pm.expect(jsonData.weather).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Main field is a string\", function () {\r",
							"    pm.expect(jsonData.weather[0].main).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Temperature is a number\", function () {\r",
							"    pm.expect(jsonData.main.temp).to.be.a(\"number\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}?lat={{lat}}&lon={{lon}}&units={{units}}&appid={{api_key}}",
					"host": [
						"{{base_url}}"
					],
					"query": [
						{
							"key": "lat",
							"value": "{{lat}}"
						},
						{
							"key": "lon",
							"value": "{{lon}}"
						},
						{
							"key": "units",
							"value": "{{units}}"
						},
						{
							"key": "appid",
							"value": "{{api_key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Exercise 3 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response contains name\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"pm.test(\"Temperature is within a reasonable range\", function () {\r",
							"    let temp = pm.response.json().main.temp;\r",
							"    pm.expect(temp).to.be.within(-50, 50);\r",
							"});\r",
							"\r",
							"pm.test(\"Weather array has at least one item\", function () {\r",
							"    pm.expect(pm.response.json().weather.length).to.be.at.least(1);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}?lat={{lat}}&lon={{lon}}&units={{units}}&appid={{api_key}}",
					"host": [
						"{{base_url}}"
					],
					"query": [
						{
							"key": "lat",
							"value": "{{lat}}"
						},
						{
							"key": "lon",
							"value": "{{lon}}"
						},
						{
							"key": "units",
							"value": "{{units}}"
						},
						{
							"key": "appid",
							"value": "{{api_key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Exercise 4 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Extract the weather array from the API response\r",
							"let weatherArray = pm.response.json().list;\r",
							"//Loop through the weather array and validate each object\r",
							"weatherArray.forEach((item) => {\r",
							"//    Validate that the object has the required properties\r",
							"pm.test('Weather item with id ${item.weather[0].id} has required properties', function () {\r",
							"        pm.expect(item.weather[0]).to.have.property(\"id\");\r",
							"       pm.expect(item.weather[0]).to.have.property(\"main\");\r",
							"       pm.expect(item.weather[0]).to.have.property(\"description\");\r",
							"   });\r",
							"//    Print a message in the console for each weather condition\r",
							"   console.log(`Weather condition: ${item.weather[0].main} - ${item.weather[0].\r",
							" description}`);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//1. Extract  the weather array from the API response (pm.response.json().weather).\r",
							"//2. Loops through each item in the weather array using forEach().\r",
							"//3. Perform a test on each item using pm.test() to ensure it has the required properties:\r",
							"//4. \"id\" (numeric identifier of the weather condition)\r",
							"//5. \"main\" (general category, e.g., Rain, Clouds)\r",
							"//6. \"description\" (detailed description, e.g., light rain, scattered clouds)\r",
							"//7. Print a message in the Postman console showing the main and description values.\r",
							"\r",
							"// Extract the weather array from the API response\r",
							"//let weatherArray = pm.response.json().list;\r",
							" \r",
							"// Loop through the weather array and validate each object\r",
							"//weatherArray.forEach((item) => {\r",
							"    // Validate that the object has the required properties\r",
							"//    pm.test(`Weather item with id ${item.weather[0].id} has required properties`, \r",
							"//  function () {\r",
							"//      pm.expect(item.weather[0]).to.have.property(\"id\");\r",
							"//        pm.expect(item.weather[0]).to.have.property(\"main\");\r",
							"//        pm.expect(item.weather[0]).to.have.property(\"description\");\r",
							"//    });\r",
							" \r",
							"    // Print a message in the console for each weather condition\r",
							"//    console.log(`Weather condition: ${item.weather[0].main} - ${item.weather[0].\r",
							"//  description}`);\r",
							"//});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Forecast_url}}?lat={{lat}}&lon={{lon}}&units={{units}}&appid={{api_key}}",
					"host": [
						"{{Forecast_url}}"
					],
					"query": [
						{
							"key": "lat",
							"value": "{{lat}}"
						},
						{
							"key": "lon",
							"value": "{{lon}}"
						},
						{
							"key": "units",
							"value": "{{units}}"
						},
						{
							"key": "appid",
							"value": "{{api_key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Exercise 5 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let temp = pm.response.json().main.temp;\r",
							"\r",
							"if (temp < 10 ) {\r",
							"    console.log(\"Cold Weather\");\r",
							"}\r",
							"else  if (temp > 20 ) {\r",
							"    console.log(\"Warm Weather\");\r",
							"}\r",
							"else {\r",
							"    console.log(\"Moderate Weather\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}?lat={{lat}}&lon={{lon}}&units={{units}}&appid={{api_key}}",
					"host": [
						"{{base_url}}"
					],
					"query": [
						{
							"key": "lat",
							"value": "{{lat}}"
						},
						{
							"key": "lon",
							"value": "{{lon}}"
						},
						{
							"key": "units",
							"value": "{{units}}"
						},
						{
							"key": "appid",
							"value": "{{api_key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Exercise 6 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//#1\r",
							"pm.test(\"Temp min is not greater than temp max\", function () {\r",
							"    tempMin = pm.response.json().list[0].main.temp_min;\r",
							"    tempMax = pm.response.json().list[0].main.temp_max;\r",
							"\r",
							"    if (tempMin < tempMax) {\r",
							"        console.log(\"Test a passes\");\r",
							"    }\r",
							"});\r",
							"//#2\r",
							"pm.test(\"City name contains at least one vowel\", function () {\r",
							"    pm.expect(pm.response.json().city.name).to.contain.oneOf(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);\r",
							"});\r",
							"//#3\r",
							"// pm.test(\"Invalid API Key error displays\", function () {\r",
							"//     pm.response.to.have.status(401);\r",
							"// });\r",
							"\r",
							"\r",
							"// assigning invalidKey to the existing api_key in environment\r",
							"// var invalidkey = pm.environment.get(\"invalidKey\");\r",
							"\r",
							"// pm.test(\"Invalid API Key Error displays\", function (){\r",
							"//     pm.sendRequest({\r",
							"//         URL:'https://api.openweathermap.org/data/2.5/forecast.json?appid=${invalidkey}',\r",
							"//         method:'GET',\r",
							"//         header:{'Content-Type':'application/json'}\r",
							"//     });\r",
							"//     {\r",
							"//         function (err, res) { //?\r",
							"//             pm.expect(pm.response).to.have.status(401);\r",
							"\r",
							"//         }\r",
							"//     }\r",
							"// });\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Forecast_url}}?lat={{lat}}&lon={{lon}}&units={{units}}&appid={{api_key}}",
					"host": [
						"{{Forecast_url}}"
					],
					"query": [
						{
							"key": "lat",
							"value": "{{lat}}"
						},
						{
							"key": "lon",
							"value": "{{lon}}"
						},
						{
							"key": "units",
							"value": "{{units}}"
						},
						{
							"key": "appid",
							"value": "{{api_key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Exercise 7 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"// // extracting cityId from the request's response\r",
							"pm.test(\"Extract and store cityId from response\", function () {\r",
							"    var jsonData = pm.response.json()\r",
							"    pm.environment.set(\"cityId\", jsonData.id)\r",
							"});\r",
							"\r",
							"//Retrieving values from the current environment\r",
							"var apiKey = pm.environment.get(\"api_key\");\r",
							"var cityId1 = pm.environment.get(\"cityId\");\r",
							"\r",
							"\r",
							"pm.test(\"Validate forecast data\", function () {\r",
							"    //sending another request within the current request\r",
							"    pm.sendRequest({\r",
							"        //assigning the URL for the request\r",
							"        URL: 'https://api.openweathermap.org/data/2.5/forecast.json?appid=${api_key}&id=${cityId1}',\r",
							"        //setting the method for the request\r",
							"        method: 'GET',\r",
							"        //selecting the header type for the request\r",
							"        header: {'Content-Type':'application/json'}\r",
							"    },\r",
							"    function () \r",
							"    {\r",
							"        //turning ID from second response into cityId2 variable\r",
							"        var cityId2 = pm.response.json().id\r",
							"        pm.test(\"status code is 200\", function () {\r",
							"            pm.expect(pm.response).to.have.status(200);\r",
							"        });\r",
							"        // comparing city variables\r",
							"        pm.test(\"City id in both response matches\", function (){\r",
							"            pm.expect(cityId1).to.equal(cityId2)\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"// //?does not work?\r",
							"// // extracting cityId from the request's response\r",
							"// pm.test(\"Extract and store cityId from response\", function () { \r",
							"//     response1 = pm.response.json()\r",
							"//     pm.environment.set(\"cityId\", response1.id)\r",
							"// });\r",
							"\r",
							"// //Retrieving values from the current environment\r",
							"// var apiKey = pm.environment.get(\"api_key\"); \r",
							"// var cityId1 = pm.environment.get(\"cityId\");\r",
							"\r",
							"\r",
							"// pm.test(\"Validate forecast data\", function () {\r",
							"//     //sending another request within the current request\r",
							"//     pm.sendRequest({\r",
							"//         //assigning the URL for the request\r",
							"//         URL: 'https://api.openweathermap.org/data/2.5/forecast.json?appid=${api_key}&id=${cityId1}',\r",
							"//         //setting the method for the request\r",
							"//         method: 'GET',\r",
							"//         //selecting the header type for the request\r",
							"//         header: {\r",
							"//             'Content-Type':'application/json'\r",
							"//         }\r",
							"//     });\r",
							"// });  \r",
							"\r",
							"// // Creates status 200 confirmation test\r",
							"// pm.test(\"status code is 200\", function () {\r",
							"//             pm.expect(pm.response).to.have.status(200);\r",
							"// });              \r",
							"\r",
							"// pm.test(\"City id in both response matches\", function (){\r",
							"//     //turning ID from second response into cityId2 variable\r",
							"//     var cityId2 = pm.response.json().id\r",
							"//     pm.expect(cityId1).to.equal(cityId2)\r",
							"// });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Forecast_url}}?lat={{lat}}&lon={{lon}}&units={{units}}&appid={{api_key}}",
					"host": [
						"{{Forecast_url}}"
					],
					"query": [
						{
							"key": "lat",
							"value": "{{lat}}"
						},
						{
							"key": "lon",
							"value": "{{lon}}"
						},
						{
							"key": "units",
							"value": "{{units}}"
						},
						{
							"key": "appid",
							"value": "{{api_key}}"
						}
					]
				}
			},
			"response": []
		}
	]
}